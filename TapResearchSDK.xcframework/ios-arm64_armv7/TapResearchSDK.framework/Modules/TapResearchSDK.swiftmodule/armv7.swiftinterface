// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TapResearchSDK
import CoreTelephony
import Foundation
import Network
import OSLog
import Swift
import SystemConfiguration
@_exported import TapResearchSDK
import TapResearchSDKPrivate
import UIKit
import _Concurrency
@objc public enum LogLevel : Swift.Int {
  case none
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum HTTPParamsDataType : Swift.Int {
  case none
  case json
  case query
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class TRRequestProvider : ObjectiveC.NSObject {
  @objc public class func request(withMethod method: Swift.String, url: Swift.String, headers: [Swift.String : Swift.String]?, paramsType: TapResearchSDK.HTTPParamsDataType, params: [Swift.String : Any]?) -> Foundation.URLRequest?
  @objc override dynamic public init()
  @objc deinit
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public typealias Parameters = [Swift.String : Any]
@_inheritsConvenienceInitializers @objc public class LogHelper : ObjectiveC.NSObject {
  @objc public class func configure(platform: TapResearchSDK.PlatformType, appId: Swift.String, logLevel: TapResearchSDK.LogLevel, apiToken: Swift.String, additionalHeaders: TapResearchSDK.HTTPHeaders? = nil)
  @objc public class func setLogLevel(to logLevel: Swift.Int)
  @objc public class func log(_ level: TapResearchSDK.LogLevel, eventType: TapResearchSDK.LogEventType, category: TapResearchSDK.LogType, message: Swift.String, additionalHeaders: TapResearchSDK.HTTPHeaders? = nil)
  @objc public class func logWeb(_ level: TapResearchSDK.LogLevel, eventType: TapResearchSDK.LogEventType, webEvent: TapResearchSDK.TRWebEvent)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class TRWebEvent : ObjectiveC.NSObject {
  @objc public init(withError error: Foundation.NSError, startingUrlString: Swift.String, webSourceUrl: Swift.String?, cpIdentifier: Swift.String?, tabIndex: Swift.Int, isProvisional: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CacheManager {
  public static var shared: TapResearchSDK.CacheManager
  @objc deinit
}
@objc open class LogEvent : ObjectiveC.NSObject, Swift.Codable {
  public static func == (lhs: TapResearchSDK.LogEvent, rhs: TapResearchSDK.LogEvent) -> Swift.Bool
  public init(withType type: TapResearchSDK.LogEventType, content: Swift.String, additionalParams: TapResearchSDK.Parameters = [:])
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class TRLogger : ObjectiveC.NSObject {
  public class func configure(platform: TapResearchSDK.PlatformType, appId: Swift.String, logLevel: TapResearchSDK.LogLevel, apiToken: Swift.String, additionalHeaders: TapResearchSDK.HTTPHeaders? = nil)
  @objc public class func setLogLevel(to logLevel: TapResearchSDK.LogLevel)
  public class func log(_ level: TapResearchSDK.LogLevel, eventType: TapResearchSDK.LogEventType, category: TapResearchSDK.LogType = .general, message: Swift.String, additionalHeaders: TapResearchSDK.HTTPHeaders? = nil, parameters: TapResearchSDK.Parameters? = nil, filePath: Swift.String = #file, line: Swift.Int = #line, column: Swift.Int = #column, funcName: Swift.String = #function)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkMonitor {
  public class func startMonitoring()
  @objc deinit
}
@objc public enum LogType : Swift.Int {
  case general
  case network
  case lifecycle
  case web
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogEventType : Swift.Int {
  case crash
  case user
  case webFailedPreload
  case webFailedload
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class Constants : ObjectiveC.NSObject {
  @objc public static var kTRBaseURL: Swift.String
  @objc public static var kTRVersion: Swift.String
  @objc public static var kTRPlatform: Swift.String
  @objc public static var kTRAPIVersion: Swift.String
  @objc public static var kTRErrorDomain: Swift.String
  @objc public static var kTRGetVersions: Swift.String
  @objc public static var kTRGetRewardDelta: Swift.String
  @objc public static var kTRPostPlayers: Swift.String
  @objc public static var kTRPostAppSessions: Swift.String
  @objc public static var kTRPostAppImpressions: Swift.String
  @objc public static var kTRPostAppSessionOffers: Swift.String
  @objc public static var kTRPostRewardRedeemed: Swift.String
  @objc public static var kTRPostSurveyURL: Swift.String
  @objc public static var kTRPostEvents: Swift.String
  @objc public static var kTRGetOffers: Swift.String
  @objc public static var kNetworkTimeoutSeconds: Swift.Double
  @objc public static var kTRCPIdentifier: Swift.String
  @objc public static var kTRCryptoKey: Swift.String
  @objc public static var kTRShouldSleepHeader: Swift.String
  @objc public static var kTRMessageOfferEntryKey: Swift.String
  @objc public static var kTRMessageNoOfferKey: Swift.String
  @objc public static var kTRMessageAbandonKey: Swift.String
  @objc public static var kTRAbandonButtonTextKey: Swift.String
  @objc public static var kTRCloseButtonTextKey: Swift.String
  @objc public static var kTRAbandonAlertTitleKey: Swift.String
  @objc public static var kTRAbandonAlertContinueKey: Swift.String
  @objc public static var kTRAbandonAlertCancelKey: Swift.String
  @objc public static var kTRMessageSDKVersionNoLongerSupported: Swift.String
  @objc public static var kTRPlayerKey: Swift.String
  @objc public static var kTRAppSessionKey: Swift.String
  @objc public static var kTRAppImpressionKey: Swift.String
  @objc public static var kTRUserIdentifierKey: Swift.String
  @objc public static var kTRLastDateKey: Swift.String
  @objc public static var kTRRequestsKey: Swift.String
  @objc public static var kTRRewardsKey: Swift.String
  @objc public static var kTRSDKInvalidBundleVersionKey: Swift.String
  @objc public static var kTRCrashEventKey: Swift.String
  @objc public static var kTREventsKey: Swift.String
  @objc public static var kTRVersionKey: Swift.String
  @objc public static var kTRCPIdentifierKey: Swift.String
  @objc public static var kTROrientationKey: Swift.String
  @objc public static var kTRScreenDensityKey: Swift.String
  @objc public static var kTRScreenPixelSizeKey: Swift.String
  @objc public static var kTRConnectionTypeKey: Swift.String
  @objc public static var kTRCarrierKey: Swift.String
  @objc public static var kTRPlatformKey: Swift.String
  @objc public static var kTROsVersionKey: Swift.String
  @objc public static var kTRDeviceNameKey: Swift.String
  @objc public static var kTVersionKey: Swift.String
  @objc public static var kTRAppIdKey: Swift.String
  @objc public static var kTRTriggeredAtKey: Swift.String
  @objc public static var kTRPlayerEarnedRewardNotification: Swift.String
  @objc public static var kTRSessionMonitoringInterval: Swift.Int
  @objc public static var kTRSessionLoginThreshold: Swift.Int
  @objc public static var kTRRequestInterval: Swift.Int
  @objc public static var kTREventCrash: Swift.String
  @objc public static var kTREventUser: Swift.String
  @objc public static var kTREventSendFail: Swift.String
  @objc public static var kTREventCleanCache: Swift.String
  @objc public static var kTREventWebFailedLoad: Swift.String
  @objc public static var kTREventWebFailedPreLoad: Swift.String
  @objc public static var kTREventCrashType: Swift.Int
  @objc public static var kTREventUserType: Swift.Int
  @objc public static var kTREventSendFailType: Swift.Int
  @objc public static var kTREventCleanCacheType: Swift.Int
  @objc public static var kTREventWebFailedPreLoadType: Swift.Int
  @objc public static var kTREventWebFailedLoadType: Swift.Int
  @objc public static var kValueNotAvailableString: Swift.String
  @objc public static var kTRDefaultIdfa: Swift.String
  @objc public static var kTRDefaultFastPassPollingTime: (Swift.Double)
  @objc public static var kTRDefaultStandardPollingTime: (Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PlatformType : Swift.Int {
  case ios
  case tvOS
  case oasis
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public var ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static var reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (TapResearchSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (TapResearchSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable
    case reachableViaWiFi
    case reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: TapResearchSDK.Reachability.NetworkStatus, b: TapResearchSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable
    case wifi
    case cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static var none: TapResearchSDK.Reachability.Connection
    public static func == (a: TapResearchSDK.Reachability.Connection, b: TapResearchSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: TapResearchSDK.Reachability.NetworkReachable?
  public var whenUnreachable: TapResearchSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: TapResearchSDK.Reachability.Connection {
    get
  }
  public var connection: TapResearchSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  public convenience init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  public convenience init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension TapResearchSDK.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
