#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef TAPRESEARCHSDK_SWIFT_H
#define TAPRESEARCHSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TapResearchSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK12TRQQComplete")
@interface TRQQComplete : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull complete_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull completed_at;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TRQQDataPayloadQuestion;
@class TRQQDataPayloadTargetFilter;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK15TRQQDataPayload")
@interface TRQQDataPayload : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull survey_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull app_name;
@property (nonatomic, readonly, copy) NSString * _Nonnull api_token;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdk_version;
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull placement_tag;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_locale;
@property (nonatomic, readonly, copy) NSString * _Nonnull seen_at;
@property (nonatomic, readonly, copy) NSArray<TRQQDataPayloadQuestion *> * _Nonnull questions;
@property (nonatomic, readonly, copy) NSArray<TRQQDataPayloadTargetFilter *> * _Nullable target_audience;
@property (nonatomic, readonly, strong) TRQQComplete * _Nullable complete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TRQQUserAnswer;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK23TRQQDataPayloadQuestion")
@interface TRQQDataPayloadQuestion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull question_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull question_text;
@property (nonatomic, readonly, copy) NSString * _Nonnull question_type;
@property (nonatomic) NSInteger rating_scale_size;
@property (nonatomic, readonly, strong) TRQQUserAnswer * _Nullable user_answer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK27TRQQDataPayloadTargetFilter")
@interface TRQQDataPayloadTargetFilter : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_attribute_name;
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_operator;
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_value;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK14TRQQUserAnswer")
@interface TRQQUserAnswer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull identifiers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK8TRReward")
@interface TRReward : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable transactionIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable placementTag;
@property (nonatomic, readonly, copy) NSString * _Nullable placementIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyName;
@property (nonatomic, readonly, copy) NSString * _Nullable payoutEvent;
@property (nonatomic, readonly) NSInteger rewardAmount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK8TRSurvey")
@interface TRSurvey : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull surveyIdentifier;
@property (nonatomic, readonly) NSInteger lengthInMinutes;
@property (nonatomic, readonly) double rewardAmount;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyName;
@property (nonatomic, readonly) BOOL isHotTile;
@property (nonatomic, readonly) BOOL isSale;
@property (nonatomic, readonly) double saleMultiplier;
@property (nonatomic, readonly) double preSaleRewardAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable saleEndDate;
@end

@protocol TapResearchSDKDelegate;
@class NSError;
@protocol TapResearchRewardDelegate;
@protocol TapResearchQuickQuestionDelegate;
@protocol TapResearchContentDelegate;
@protocol TapResearchSurveysDelegate;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK11TapResearch")
@interface TapResearch : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorDomain;)
+ (NSString * _Nonnull)TapResearchErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorCode;)
+ (NSString * _Nonnull)TapResearchErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorCodeString;)
+ (NSString * _Nonnull)TapResearchErrorCodeString SWIFT_WARN_UNUSED_RESULT;
/// <hr/>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier and a delegate for error and ready reporting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for error reporting and receiving sdk ready status.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier, user attributes and a delegate for error and ready reporting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param userAttributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier userAttributes:(NSDictionary * _Nonnull)userAttributes clearPreviousAttributes:(BOOL)clearPreviousAttributes sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier and delegates for error and ready reporting, rewards and Quick Question data.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param rewardDelegate An object that implementes the TapResearchRewardDelegate callback to receive rewards.
///
/// \param quickQuestionDelegate An objcet thatimplements the TapResearchQuickQuestionDelegate callback to receive a Quick Question data respose payload.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate rewardDelegate:(id <TapResearchRewardDelegate> _Nonnull)rewardDelegate quickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)quickQuestionDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier, user attributes and delegates for error and ready reporting, rewards and Quick Question data.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param userAttributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param rewardDelegate An object that implementes the TapResearchRewardDelegate callback to receive rewards.
///
/// \param quickQuestionDelegate An objcet thatimplements the TapResearchQuickQuestionDelegate callback to receive a Quick Question data respose payload.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier userAttributes:(NSDictionary * _Nonnull)userAttributes clearPreviousAttributes:(BOOL)clearPreviousAttributes sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate rewardDelegate:(id <TapResearchRewardDelegate> _Nonnull)rewardDelegate quickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)quickQuestionDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Set the reward delegate.</h1>
/// Set the reward handler or clear the reward delegate
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#tapresearchrewarddelegate">Documentation: TapResearchRewardDelegate</a>
/// \param _ delegate An object that implements the TapResearchRewardDelegate callback to receive rewards, or <code>nil</code> to clear it.
///
+ (void)setRewardDelegate:(id <TapResearchRewardDelegate> _Nullable)delegate;
/// <h1>Set the Quick Question data delegate.</h1>
/// Set the Quick Question delegate or clear the delegate.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#tapresearchquickquestiondelegate">Documentation: TapResearchQuickQuestionDelegate</a>
/// \param _ delegate An object that implements the TapResearchQuickQuestionDelegate callback to receive Quick Question data payloads, or <code>nil</code> to clear it.
///
+ (void)setQuickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)delegate;
/// <h1>Check if the SDK is ready.</h1>
/// Check if the SDK is ready to handle your app’s requests.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#checking-if-the-sdk-is-ready">Documentation: Checking if the SDK is ready</a>
/// <ul>
///   <li>
///     Returns A boolean <code>true</code> indicating the SDK is ready or <code>false</code> if not.
///   </li>
/// </ul>
+ (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
/// <h1>Set a user identifier.</h1>
/// Set a unique user identifier.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#setting-the-user-identifier">Documentation: Setting the user identifier</a>
/// \param userIdentifier A string with a unique user identifier.
///
/// \param completion <em>Deprecated</em> An optional completion block to receive any errors that occured while setting the user identifier.
///
+ (void)setUserIdentifier:(NSString * _Nonnull)userIdentifier completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Can a placement be shown?</h1>
/// Check if a placement can be shown.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// <ul>
///   <li>
///     Returns A boolean, <code>true</code> if the placement can be shown, <code>false</code> if not.`
///   </li>
/// </ul>
/// \param forPlacement tag A placement tag string.
///
/// \param error An optional completion block to receive any errors that occured while checking if the placement can be shown.
///
+ (BOOL)canShowContentForPlacement:(NSString * _Nonnull)tag error:(void (^ _Nullable)(NSError * _Nullable))error SWIFT_WARN_UNUSED_RESULT;
/// <h1>Show a placement.</h1>
/// Show a placement.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// \param forPlacement tag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param completion An optional completion block to receive any errors that occured while showing the placement.
///
+ (void)showContentForPlacement:(NSString * _Nonnull)tag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Show a placement.</h1>
/// Show a placement with custom parameters.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// \param forPlacement tag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param customParameters A dictionary with additional parameters, see <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#passing-custom-parameters">Documentation: Passing custom porameters</a>
///
/// \param completion An optional completion block to receive any errors that occured while showing the placement.
///
+ (void)showContentForPlacement:(NSString * _Nonnull)tag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate customParameters:(NSDictionary * _Nonnull)customParameters completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Send user attributes.</h1>
/// Send user attributes for targeting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#user-attributes">Documentation: User Attributes</a>
/// \param attributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
+ (NSError * _Nullable)sendUserAttributesWithAttributes:(NSDictionary * _Nonnull)attributes clearPreviousAttributes:(BOOL)clearPreviousAttributes SWIFT_WARN_UNUSED_RESULT;
/// <h1>Set a surveys delegate.</h1>
/// Set the surveys delegate or clear the delegate.
/// \param delegate An object that implements the TapResearchSurveysDelegate callback to receive survey availability updates, or <code>nil</code> to clear it.
///
+ (void)setSurveysDelegate:(id <TapResearchSurveysDelegate> _Nullable)delegate;
/// <h1>Check if a placement has surveys.</h1>
/// Check if a placement has surveys.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#checking-for-available-surveys">Documentation: Checking for available surveys</a>
/// <ul>
///   <li>
///     Returns A boolean <code>true</code> indicating the placement has surveys <code>true</code> or <code>false</code> if not.
///   </li>
/// </ul>
/// \param for placementTag A placement tag string to check.
///
/// \param errorHandler An optional completion block to receive any errors that occured while checking the placement for surveys.
///
+ (BOOL)hasSurveysFor:(NSString * _Nonnull)placementTag errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler SWIFT_WARN_UNUSED_RESULT;
/// <h1>Get a placement’s surveys.</h1>
/// Get a placment’s surveys as an array of <code>TRSurvey</code> objects.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#getting-available-surveys">Documentation: Getting available surveys</a>
/// <ul>
///   <li>
///     Returns An array of <code>TRSurvey</code> objects, the array will be empty if there are none.
///   </li>
/// </ul>
/// \param for placementTag A placement tag string.
///
/// \param errorHandler An optional completion block to receive any errors that occured while getting surveys.
///
+ (NSArray<TRSurvey *> * _Nonnull)getSurveysFor:(NSString * _Nonnull)placementTag errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler SWIFT_WARN_UNUSED_RESULT;
/// <h1>Can a survey be shown?</h1>
/// Check if a survey for a placement can be shown.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#check-that-a-survey-can-be-shown">Documentation: Check that a survey can be shown</a>
/// <ul>
///   <li>
///     Returns A boolean, <code>true</code> if the survey can be shown, <code>false</code> if not.
///   </li>
/// </ul>
/// \param surveyId A survey identifier string.
///
/// \param forPlacementTag placementTag A placement tag string.
///
+ (BOOL)canShowSurveyWithSurveyId:(NSString * _Nonnull)surveyId forPlacementTag:(NSString * _Nonnull)placementTag SWIFT_WARN_UNUSED_RESULT;
/// <h1>Show a survey.</h1>
/// Show a survey.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#showing-a-survey">Documentation: Displaying a survey</a>
/// \param surveyId A survey identifier string.
///
/// \param placementTag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param errorHandler An optional completion block to receive any errors that occured while showing the survey.
///
+ (void)showSurveyWithSurveyId:(NSString * _Nonnull)surveyId placementTag:(NSString * _Nonnull)placementTag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
/// <h1>Show a survey.</h1>
/// Show a survey with custom parameters.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#showing-a-survey">Documentation: Displaying a survey</a>
/// \param surveyId A survey identifier string.
///
/// \param placementTag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param customParameters A dictionary with additional parameters, see <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#passing-custom-parameters">Documentation: Passing custom porameters</a>
///
/// \param errorHandler An optional completion block to receive any errors that occured while showing the survey.
///
+ (void)showSurveyWithSurveyId:(NSString * _Nonnull)surveyId placementTag:(NSString * _Nonnull)placementTag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate customParameters:(NSDictionary * _Nonnull)customParameters errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK26TapResearchSurveysDelegate_")
@protocol TapResearchSurveysDelegate
- (void)onTapResearchSurveysRefreshedForPlacement:(NSString * _Nonnull)placementTag;
@end

@interface TapResearch (SWIFT_EXTENSION(TapResearchSDK)) <TapResearchSurveysDelegate>
/// <hr/>
- (void)onTapResearchSurveysRefreshedForPlacement:(NSString * _Nonnull)placementTag;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK26TapResearchContentDelegate_")
@protocol TapResearchContentDelegate
- (void)onTapResearchContentShownForPlacement:(NSString * _Nonnull)placement;
- (void)onTapResearchContentDismissedForPlacement:(NSString * _Nonnull)placement;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK32TapResearchQuickQuestionDelegate_")
@protocol TapResearchQuickQuestionDelegate
- (void)onTapResearchQuickQuestionResponse:(TRQQDataPayload * _Nonnull)qqPayload;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK25TapResearchRewardDelegate_")
@protocol TapResearchRewardDelegate
- (void)onTapResearchDidReceiveRewards:(NSArray<TRReward *> * _Nonnull)rewards;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK22TapResearchSDKDelegate_")
@protocol TapResearchSDKDelegate
- (void)onTapResearchDidError:(NSError * _Nonnull)error;
- (void)onTapResearchSdkReady;
@optional
- (void)onTapResearchDidReceiveRewards:(NSArray<TRReward *> * _Nonnull)rewards;
- (void)onTapResearchQuickQuestionResponse:(TRQQDataPayload * _Nonnull)qqPayload;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
#ifndef TAPRESEARCHSDK_SWIFT_H
#define TAPRESEARCHSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TapResearchSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class NSString;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK12TRQQComplete")
@interface TRQQComplete : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull complete_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull completed_at;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TRQQDataPayloadQuestion;
@class TRQQDataPayloadTargetFilter;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK15TRQQDataPayload")
@interface TRQQDataPayload : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull survey_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull app_name;
@property (nonatomic, readonly, copy) NSString * _Nonnull api_token;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdk_version;
@property (nonatomic, readonly, copy) NSString * _Nonnull platform;
@property (nonatomic, readonly, copy) NSString * _Nonnull placement_tag;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_locale;
@property (nonatomic, readonly, copy) NSString * _Nonnull seen_at;
@property (nonatomic, readonly, copy) NSArray<TRQQDataPayloadQuestion *> * _Nonnull questions;
@property (nonatomic, readonly, copy) NSArray<TRQQDataPayloadTargetFilter *> * _Nullable target_audience;
@property (nonatomic, readonly, strong) TRQQComplete * _Nullable complete;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TRQQUserAnswer;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK23TRQQDataPayloadQuestion")
@interface TRQQDataPayloadQuestion : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull question_identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull question_text;
@property (nonatomic, readonly, copy) NSString * _Nonnull question_type;
@property (nonatomic) NSInteger rating_scale_size;
@property (nonatomic, readonly, strong) TRQQUserAnswer * _Nullable user_answer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK27TRQQDataPayloadTargetFilter")
@interface TRQQDataPayloadTargetFilter : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_attribute_name;
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_operator;
@property (nonatomic, readonly, copy) NSString * _Nonnull filter_value;
@property (nonatomic, readonly, copy) NSString * _Nonnull user_value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK14TRQQUserAnswer")
@interface TRQQUserAnswer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull identifiers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK8TRReward")
@interface TRReward : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable transactionIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable placementTag;
@property (nonatomic, readonly, copy) NSString * _Nullable placementIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyName;
@property (nonatomic, readonly, copy) NSString * _Nullable payoutEvent;
@property (nonatomic, readonly) NSInteger rewardAmount;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK8TRSurvey")
@interface TRSurvey : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull surveyIdentifier;
@property (nonatomic, readonly) NSInteger lengthInMinutes;
@property (nonatomic, readonly) double rewardAmount;
@property (nonatomic, readonly, copy) NSString * _Nonnull currencyName;
@property (nonatomic, readonly) BOOL isHotTile;
@property (nonatomic, readonly) BOOL isSale;
@property (nonatomic, readonly) double saleMultiplier;
@property (nonatomic, readonly) double preSaleRewardAmount;
@property (nonatomic, readonly, copy) NSString * _Nullable saleEndDate;
@end

@protocol TapResearchSDKDelegate;
@class NSError;
@protocol TapResearchRewardDelegate;
@protocol TapResearchQuickQuestionDelegate;
@protocol TapResearchContentDelegate;
@protocol TapResearchSurveysDelegate;
/// <hr/>
/// <hr/>
SWIFT_CLASS("_TtC14TapResearchSDK11TapResearch")
@interface TapResearch : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorDomain;)
+ (NSString * _Nonnull)TapResearchErrorDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorCode;)
+ (NSString * _Nonnull)TapResearchErrorCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TapResearchErrorCodeString;)
+ (NSString * _Nonnull)TapResearchErrorCodeString SWIFT_WARN_UNUSED_RESULT;
/// <hr/>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier and a delegate for error and ready reporting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for error reporting and receiving sdk ready status.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier, user attributes and a delegate for error and ready reporting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param userAttributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier userAttributes:(NSDictionary * _Nonnull)userAttributes clearPreviousAttributes:(BOOL)clearPreviousAttributes sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier and delegates for error and ready reporting, rewards and Quick Question data.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param rewardDelegate An object that implementes the TapResearchRewardDelegate callback to receive rewards.
///
/// \param quickQuestionDelegate An objcet thatimplements the TapResearchQuickQuestionDelegate callback to receive a Quick Question data respose payload.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate rewardDelegate:(id <TapResearchRewardDelegate> _Nonnull)rewardDelegate quickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)quickQuestionDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Initialize the SDK.</h1>
/// Initialize the TapResearch SDK with API token, a user identifier, user attributes and delegates for error and ready reporting, rewards and Quick Question data.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#initialization">Documentation: Initialization</a>
/// \param apiToken Your app’s API token.
///
/// \param userIdentifier The user identifier for the user of the app, this is required and must be unique per user.
///
/// \param userAttributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
/// \param sdkDelegate An object that implements the TapResearchSDKDelegate’s required callback functions for erorr reporting and receiving sdk ready status.
///
/// \param rewardDelegate An object that implementes the TapResearchRewardDelegate callback to receive rewards.
///
/// \param quickQuestionDelegate An objcet thatimplements the TapResearchQuickQuestionDelegate callback to receive a Quick Question data respose payload.
///
/// \param completion An optional completion block to receive any errors that occured during initialization.
///
+ (void)initializeWithAPIToken:(NSString * _Nonnull)apiToken userIdentifier:(NSString * _Nonnull)userIdentifier userAttributes:(NSDictionary * _Nonnull)userAttributes clearPreviousAttributes:(BOOL)clearPreviousAttributes sdkDelegate:(id <TapResearchSDKDelegate> _Nonnull)sdkDelegate rewardDelegate:(id <TapResearchRewardDelegate> _Nonnull)rewardDelegate quickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)quickQuestionDelegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Set the reward delegate.</h1>
/// Set the reward handler or clear the reward delegate
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#tapresearchrewarddelegate">Documentation: TapResearchRewardDelegate</a>
/// \param _ delegate An object that implements the TapResearchRewardDelegate callback to receive rewards, or <code>nil</code> to clear it.
///
+ (void)setRewardDelegate:(id <TapResearchRewardDelegate> _Nullable)delegate;
/// <h1>Set the Quick Question data delegate.</h1>
/// Set the Quick Question delegate or clear the delegate.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#tapresearchquickquestiondelegate">Documentation: TapResearchQuickQuestionDelegate</a>
/// \param _ delegate An object that implements the TapResearchQuickQuestionDelegate callback to receive Quick Question data payloads, or <code>nil</code> to clear it.
///
+ (void)setQuickQuestionDelegate:(id <TapResearchQuickQuestionDelegate> _Nullable)delegate;
/// <h1>Check if the SDK is ready.</h1>
/// Check if the SDK is ready to handle your app’s requests.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#checking-if-the-sdk-is-ready">Documentation: Checking if the SDK is ready</a>
/// <ul>
///   <li>
///     Returns A boolean <code>true</code> indicating the SDK is ready or <code>false</code> if not.
///   </li>
/// </ul>
+ (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
/// <h1>Set a user identifier.</h1>
/// Set a unique user identifier.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#setting-the-user-identifier">Documentation: Setting the user identifier</a>
/// \param userIdentifier A string with a unique user identifier.
///
/// \param completion <em>Deprecated</em> An optional completion block to receive any errors that occured while setting the user identifier.
///
+ (void)setUserIdentifier:(NSString * _Nonnull)userIdentifier completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Can a placement be shown?</h1>
/// Check if a placement can be shown.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// <ul>
///   <li>
///     Returns A boolean, <code>true</code> if the placement can be shown, <code>false</code> if not.`
///   </li>
/// </ul>
/// \param forPlacement tag A placement tag string.
///
/// \param error An optional completion block to receive any errors that occured while checking if the placement can be shown.
///
+ (BOOL)canShowContentForPlacement:(NSString * _Nonnull)tag error:(void (^ _Nullable)(NSError * _Nullable))error SWIFT_WARN_UNUSED_RESULT;
/// <h1>Show a placement.</h1>
/// Show a placement.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// \param forPlacement tag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param completion An optional completion block to receive any errors that occured while showing the placement.
///
+ (void)showContentForPlacement:(NSString * _Nonnull)tag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Show a placement.</h1>
/// Show a placement with custom parameters.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#displaying-a-placement">Documentation: Displaying a placement</a>
/// \param forPlacement tag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param customParameters A dictionary with additional parameters, see <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#passing-custom-parameters">Documentation: Passing custom porameters</a>
///
/// \param completion An optional completion block to receive any errors that occured while showing the placement.
///
+ (void)showContentForPlacement:(NSString * _Nonnull)tag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate customParameters:(NSDictionary * _Nonnull)customParameters completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// <h1>Send user attributes.</h1>
/// Send user attributes for targeting.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#user-attributes">Documentation: User Attributes</a>
/// \param attributes A dictionary with extra attributes for this user.
///
/// \param clearPreviousAttributes Replace (true) existing attributes with the userAttributes dictionary or update (false) them.
///
+ (NSError * _Nullable)sendUserAttributesWithAttributes:(NSDictionary * _Nonnull)attributes clearPreviousAttributes:(BOOL)clearPreviousAttributes SWIFT_WARN_UNUSED_RESULT;
/// <h1>Set a surveys delegate.</h1>
/// Set the surveys delegate or clear the delegate.
/// \param delegate An object that implements the TapResearchSurveysDelegate callback to receive survey availability updates, or <code>nil</code> to clear it.
///
+ (void)setSurveysDelegate:(id <TapResearchSurveysDelegate> _Nullable)delegate;
/// <h1>Check if a placement has surveys.</h1>
/// Check if a placement has surveys.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#checking-for-available-surveys">Documentation: Checking for available surveys</a>
/// <ul>
///   <li>
///     Returns A boolean <code>true</code> indicating the placement has surveys <code>true</code> or <code>false</code> if not.
///   </li>
/// </ul>
/// \param for placementTag A placement tag string to check.
///
/// \param errorHandler An optional completion block to receive any errors that occured while checking the placement for surveys.
///
+ (BOOL)hasSurveysFor:(NSString * _Nonnull)placementTag errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler SWIFT_WARN_UNUSED_RESULT;
/// <h1>Get a placement’s surveys.</h1>
/// Get a placment’s surveys as an array of <code>TRSurvey</code> objects.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#getting-available-surveys">Documentation: Getting available surveys</a>
/// <ul>
///   <li>
///     Returns An array of <code>TRSurvey</code> objects, the array will be empty if there are none.
///   </li>
/// </ul>
/// \param for placementTag A placement tag string.
///
/// \param errorHandler An optional completion block to receive any errors that occured while getting surveys.
///
+ (NSArray<TRSurvey *> * _Nonnull)getSurveysFor:(NSString * _Nonnull)placementTag errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler SWIFT_WARN_UNUSED_RESULT;
/// <h1>Can a survey be shown?</h1>
/// Check if a survey for a placement can be shown.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#check-that-a-survey-can-be-shown">Documentation: Check that a survey can be shown</a>
/// <ul>
///   <li>
///     Returns A boolean, <code>true</code> if the survey can be shown, <code>false</code> if not.
///   </li>
/// </ul>
/// \param surveyId A survey identifier string.
///
/// \param forPlacementTag placementTag A placement tag string.
///
+ (BOOL)canShowSurveyWithSurveyId:(NSString * _Nonnull)surveyId forPlacementTag:(NSString * _Nonnull)placementTag SWIFT_WARN_UNUSED_RESULT;
/// <h1>Show a survey.</h1>
/// Show a survey.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#showing-a-survey">Documentation: Displaying a survey</a>
/// \param surveyId A survey identifier string.
///
/// \param placementTag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param errorHandler An optional completion block to receive any errors that occured while showing the survey.
///
+ (void)showSurveyWithSurveyId:(NSString * _Nonnull)surveyId placementTag:(NSString * _Nonnull)placementTag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
/// <h1>Show a survey.</h1>
/// Show a survey with custom parameters.
/// See <a href="https://supply-docs.tapresearch.com/docs/3.x/survey-wall-preview/ios-surveys#showing-a-survey">Documentation: Displaying a survey</a>
/// \param surveyId A survey identifier string.
///
/// \param placementTag A placement tag string.
///
/// \param delegate An object that implements TapResearchContentDelegate callbacks so that the SDK can notify the app of when content was shown and dismissed.
///
/// \param customParameters A dictionary with additional parameters, see <a href="https://supply-docs.tapresearch.com/docs/3.x/basic-integration/sdk-integration/ios#passing-custom-parameters">Documentation: Passing custom porameters</a>
///
/// \param errorHandler An optional completion block to receive any errors that occured while showing the survey.
///
+ (void)showSurveyWithSurveyId:(NSString * _Nonnull)surveyId placementTag:(NSString * _Nonnull)placementTag delegate:(id <TapResearchContentDelegate> _Nonnull)delegate customParameters:(NSDictionary * _Nonnull)customParameters errorHandler:(void (^ _Nullable)(NSError * _Nullable))errorHandler;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK26TapResearchSurveysDelegate_")
@protocol TapResearchSurveysDelegate
- (void)onTapResearchSurveysRefreshedForPlacement:(NSString * _Nonnull)placementTag;
@end

@interface TapResearch (SWIFT_EXTENSION(TapResearchSDK)) <TapResearchSurveysDelegate>
/// <hr/>
- (void)onTapResearchSurveysRefreshedForPlacement:(NSString * _Nonnull)placementTag;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK26TapResearchContentDelegate_")
@protocol TapResearchContentDelegate
- (void)onTapResearchContentShownForPlacement:(NSString * _Nonnull)placement;
- (void)onTapResearchContentDismissedForPlacement:(NSString * _Nonnull)placement;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK32TapResearchQuickQuestionDelegate_")
@protocol TapResearchQuickQuestionDelegate
- (void)onTapResearchQuickQuestionResponse:(TRQQDataPayload * _Nonnull)qqPayload;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK25TapResearchRewardDelegate_")
@protocol TapResearchRewardDelegate
- (void)onTapResearchDidReceiveRewards:(NSArray<TRReward *> * _Nonnull)rewards;
@end

/// <hr/>
/// <hr/>
SWIFT_PROTOCOL("_TtP14TapResearchSDK22TapResearchSDKDelegate_")
@protocol TapResearchSDKDelegate
- (void)onTapResearchDidError:(NSError * _Nonnull)error;
- (void)onTapResearchSdkReady;
@optional
- (void)onTapResearchDidReceiveRewards:(NSArray<TRReward *> * _Nonnull)rewards;
- (void)onTapResearchQuickQuestionResponse:(TRQQDataPayload * _Nonnull)qqPayload;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
//#error unsupported Swift architecture
#endif
